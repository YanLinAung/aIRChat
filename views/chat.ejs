<% include head %>
<!-- Dialog for connecting to a new server -->
<div class="reveal-modal" id="newServer" data-reveal>
  <h1>Connect to a server</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="server address" id="newServerAddr" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newServerChannel" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button" id="connectToNewServer">Connect</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for joining a new channel -->
<div class="reveal-modal" id="newChannel" data-reveal>
  <h1>Join a channel</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newChannelName" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="joinNewChannel">Join</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for seeing a list of nicks of users in the active channel. -->
<div class="reveal-modal" id="getNickList" data-reveal>
  <h1><!-- Filled by JS --></h1>
  <div style="height: calc(100% - 60px); overflow: auto;">
    <ul id="listOfNicks">
      <!-- Filled by JS -->
    </ul>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for sending a new private message -->
<div class="reveal-modal" id="privMsg" data-reveal>
  <h1>Send a private message</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="nickname" id="privMsgNick" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <textarea id="privMsgContents" placeholder="message to user"></textarea>
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button" id="sendPrivMsg">Send</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Nav bar for chat management -->
<nav class="top-bar" data-topbar>
  <ul class="title-area">
    <li class="name">
      <h1><a href="#">aIRChat</a></h1>
    </li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li class="has-dropdown">
        <a href="#">Chat</a>
        <ul class="dropdown">
          <li><a href="#" data-reveal-id="newServer">Connect to server</a></li>
          <li><a href="#" data-reveal-id="newChannel">Join a channel</a></li>
          <li><a href="#" data-reveal-id="getNickList">List of users</a></li>
          <li><a href="#" data-reveal-id="privMsg">Send a private message</a></li>
        </ul>
      </li>
      <li class="divider"></li>
      <li><a href="/profile">Profile</a></li>
      <li class="divider"></li>
      <li><a href="/logout">Log out</a></li>
    </ul>
  </section>
</nav>
<!-- Chat content -->
<!-- Channel and private message chat listing -->
<dl class="tabs vertical" id="chatList" data-tab>
</dl>
<!-- Content of chat -->
<div class="tabs-content vertical" id="chatContent">
  <div class="content" id="ctf-portside">
  </div>
</div>
<div class="row">
  <div class="small-6 large-8 columns">
    <textarea type="text" id="messageInput" placeholder="Message"></textarea>
  </div>
  <div class="small-4 large-2 columns">
    <a href="#" id="sendMessage" class="small button">send</a>
  </div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
  var hostname = '<%= host %>';
  var username = '<%= username %>';
  var socket = io.connect(hostname);
  var connected = false;
  
  // Parallel arrays
  // nickLists[i] contains an array of nicks of users in chats[i]
  var chats = new Array();
  var nickLists = new Array();
 
  // channelName => {low => <int>, high => <int>}
  // Maps a channel name to an object containing a number of unread messages
  // of low and high prioriy (regular messages and highlights).
  var notifications = {};

  socket.emit('serverJoin', {
    server: 'irc.freenode.net', 
    nick: username,
    firstchannel: '#ctf-portside'
  });

  var addMessage = function (data) {
    var $msgDiv = $('div#panel_' + data.channel.replace('#', '-'));
    var $tab = $('a[href=#panel_' + data.channel.replace('#', '-') + ']');
    var highlight = '';
    if (data.from === 'you') {
      highlight = ' self'; // Space needed to separate class names
    } else if (data.message.indexOf(username) != -1) {
      highlight = ' mention';
    }

    $msgDiv.append($(
      '<div class="message">' +
      '  <div class="titlebar' + highlight + '">' +
      '    <span>' + data.from + ' in ' + data.channel + '</span>' +
      '  </div>' +
      '  <div class="messageContent' + highlight + '">' +
      '    <span>' + data.message + '</span>' +
      '  </div>' +
      '</div>'
    ));
    $tab.children('span.notifyLow').text(notifications[data.channel].low);
    $tab.children('span.notifyHigh').text(notifications[data.channel].high);
  };

  // Add a new tab to the list of chat tabs and a content div to contain
  // the nick list and messages.
  var addChatSection = function (chanOrNick) {
    var $newTab = $(
      '<dd>' +
      '  <a href="#panel_' + chanOrNick.replace('#', '-') + '">' + 
      '    <span class="notifyLow">0</span>' +
      '    <span class="notifyHigh">0</span>' +
      '    ' + chanOrNick +
      '  </a>' +
      '</dd>'
    );
    $('dl#chatList').append($newTab);
    $newTab.click(clearNotifications);
    $('div#chatContent').append($(
      '<div class="content" id="panel_' + chanOrNick.replace('#', '-') + '">' +
      '</div>'
    ));
  };

  var joinChat = function (channel) {
    chats.push(channel);
    nickLists.push(new Array());
    notifications[channel] = {low: 0, high: 0};
    addChatSection(channel);
  };

  var clearNotifications = function (evt) {
    var text = $(evt.currentTarget).text();
    var channel = text.slice(text.indexOf('#')).trim();
    notifications[channel].low = 0;
    notifications[channel].high = 0;
    var $anchor = $(evt.currentTarget).children('a');
    $anchor.children('span.notifyLow').text('0');
    $anchor.children('span.notifyHigh').text('0');
  }

  socket.on('notifyLow', function (data) {
    var $activeDiv = $('div.active');
    if ($activeDiv.length > 0) {
      var activeChannel = $activeDiv.first().attr('id').replace('panel_', '').replace('-', '#'); 
      if (data.channel != activeChannel) { 
        if (data.message.indexOf(username) != -1) {
          notifications[data.channel].high++;
        } else {
          notifications[data.channel].low++; 
        }
      }
    }
    addMessage(data);
  });
  
  socket.on('notifyHigh', function (data) {
    var $activeDiv = $('div.active');
    if ($activeDiv.length > 0) {
      var activeChannel = $activeDiv.first().attr('id').replace('panel_', '').replace('-', '#');
      if (data.channel != activeChannel) { 
        notifications[data.channel].high++; 
      }
    }
    addMessage(data);
  });
  
  socket.on('connected', function (channel) {
    connected = true;
  });
  
  // Create a listing of nicks for the appropriate channel.
  // The list will not be rendered until the channel is the active one.
  socket.on('nickList', function (data) {
    var index = chats.indexOf(data.channel);
    nickLists[index] = Object.keys(data.nicks);
  });

  // Add a new nick to the list of nicks for the provided channel. 
  // Create a new chat tab if the aIRChat user is the one joining.
  socket.on('joined', function (data) {
    if (data.nick === username) {
      console.log('Joined ' + data.channel);
      joinChat(data.channel);
    } else {
      var index = chats.indexOf(data.channel);
      nickLists[index].push(data.nick);
    }
  });

  // Display a message telling the user they were kicked from the channel.
  // Also deactivate the send mechanism for this channel.
  socket.on('kicked', function (data) {
    addMessage({
      from: 'Kicked by ' + data.by,
      channel: data.channel,
      message: 'Reason provided: ' + data.reason
    });
    // TODO
    // Block the user from trying to send messages to the channel
    // that they were kicked from.
  });

  // TODO
  // Make sure to only change the nick on the appropriate servers
  // Change the nick of a user in the nicklist
  socket.on('newNick', function (data) {
    for (var i = chats.length - 1; i >= 0; i--) {
      if (chats[i] === data.channel) {
        var index = nickLists[i].indexOf(data.old);
        nickLists[index] = data.new;
        return;
      }
    }
  });

  socket.on('invite', function (data) {
    // Ask the user if they want to join the channel they were invited to
    // data.to, data.by
    var msg = 'You have been invited to the channel ' + data.to + ' by ' + data.from + '\n';
    msg += 'Would you like to join this channel now?';
    if (confirm(msg)) {
      socket.emit('joinChannel', {channel: data.to});
    }
  });
  socket.on('userLeft', function (data) {
    // Remove a user's nick from the list of nicks
    // data.from, data.nick, data.reason
  });

  $('a#sendMessage').click(function (evt) {
    if (connected === false) {
      alert('Please wait until you have finished connecting.');
      return;
    }
    var $ta = $('textarea#messageInput');
    var dest = $('div.active').first().attr('id').replace('panel_', '').replace('-', '#');
    socket.send($ta.val());
    console.log('sent "' + $ta.val() + '"');
    addMessage({channel: dest, from: 'you', message: $ta.val()});
    socket.emit('writeChat', {destination: dest, message: $ta.val()});
    $ta.val('');
  });

  // TODO
  // Make sure the channel name is valid
  $('a#joinNewChannel').click(function (evt) {
    var chanName = $('#newChannelName').val();
    socket.emit('joinChannel', {channel: chanName});
  });

  $('a[data-reveal-id=getNickList]').click(function (evt) {
    var channel = $($('div.active')[0]).attr('id').replace('panel_', '').replace('-', '#');
    var index = chats.indexOf(channel); 
    console.log('Building nicklist\n' + nickLists[index].toString());
    $('div#getNickList > h1').text('Users in ' + channel);
    $('ul#listOfNicks').html(''); // Empty out the list in case is it populated already.
    for (var i = nickLists[index].length - 1; i >= 0; i--) {
      $('ul#listOfNicks').prepend($('<li>' + nickLists[index][i] + '</li>'));
    }
  });

  $('a[href=/logout]').click(function (evt) {
    socket.emit('disconnect'); 
  });
</script>
<% include foot %>

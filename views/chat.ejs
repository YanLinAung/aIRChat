<% include head %>
<!-- Dialog for connecting to a new server -->
<div class="reveal-modal" id="newServer" data-reveal>
  <h1>Connect to a server</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="server address" id="newServerAddr" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newServerChannel" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button" id="connectToNewServer">Connect</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for joining a new channel -->
<div class="reveal-modal" id="newChannel" data-reveal>
  <h1>Join a channel</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newChannelName" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="joinNewChannel">Join</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog asking for confirmation to part from channel -->
<div class="reveal-modal" id="partChannel" data-reveal>
  <h1>Leave channel</h1>
  <div class="row">
    <div class="small-8 columns">
      <p><!-- Filled by JS --></p>
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <ul class="button-group">
        <li><a href="#" class="success button close-reveal-modal" id="confirmPartChannel">Confirm</a></li>
        <li><a href="#" class="button close-reveal-modal">Cancel</a></li>
      </ul>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for seeing a list of nicks of users in the active channel. -->
<div class="reveal-modal" id="getNickList" data-reveal>
  <h1><!-- Filled by JS --></h1>
  <div id="nickListPane">
    <ul id="listOfNicks">
      <!-- Filled by JS -->
    </ul>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for sending a new private message -->
<div class="reveal-modal" id="privMsg" data-reveal>
  <h1>Send a private message</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="nickname" id="privMsgNick" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <textarea id="privMsgContents" placeholder="message to user"></textarea>
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="sendPrivMsg">Send</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for setting profile information -->
<div class="reveal-modal" id="profileSettings" data-reveal>
  <h1>Profile settings</h1>
  <div class="row">
    <div class="small-12 small-centered columns">
      <h2><%= username %></h2>
    </div>
  </div>
  <div class="row">
    <div class="small-12 small-centered columns">
      <img class="thumbnail" src="<%= profilepic %>" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <h3>Bio</h3>
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <textarea id="bio"><%= userbio %></textarea>
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <h3>Contact</h3>
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <input type="text" placeholder="contact information" id="contact" value="<%= contact %>" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <a href="#" id="submitProfile" class="success button">Submit changes</a>
    </div>
  </div>
</div>
  
</div>
<!-- Nav bar for chat management -->
<nav class="top-bar" data-topbar>
  <ul class="title-area">
    <li class="name">
      <h1><a href="#">aIRChat</a></h1>
    </li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li class="has-dropdown">
        <a href="#">Chat</a>
        <ul class="dropdown">
          <li><a href="#" data-reveal-id="newServer">Connect to server</a></li>
          <li><a href="#" data-reveal-id="newChannel">Join a channel</a></li>
          <li><a href="#" data-reveal-id="partChannel">Leave active channel</a></li>
          <li><a href="#" data-reveal-id="getNickList">List of users</a></li>
          <li><a href="#" data-reveal-id="privMsg">Send a private message</a></li>
        </ul>
      </li>
      <li class="divider"></li>
      <li><a href="#" data-reveal-id="profileSettings">Profile</a></li>
      <li class="divider"></li>
      <li><a href="/logout" id="logout">Log out</a></li>
    </ul>
  </section>
</nav>
<!-- Chat content -->
<!-- Channel and private message chat listing -->
<dl class="tabs vertical" id="chatList" data-tab>
</dl>
<!-- Content of chat -->
<div class="tabs-content vertical" id="chatContent">
  <div class="content" id="ctf-portside">
  </div>
</div>
<input type="text" type="text" id="messageInput" placeholder="Message" />
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
  var hostname = '<%= host %>';
  var username = '<%= username %>';
  var socket = io.connect(hostname);
  var connected = false;

  // Storage for the ID of the interval used to blink the title
  // when there is a message waiting for the user.
  var intervalID = undefined;
  var windowFocused = true;
  
  // Parallel arrays
  // nickLists[i] contains an array of nicks of users in chats[i]
  var chats = new Array();
  var nickLists = new Array();
 
  // channelName => {low => <int>, high => <int>}
  // Maps a channel name to an object containing a number of unread messages
  // of low and high prioriy (regular messages and highlights).
  var notifications = {};

  socket.emit('serverJoin', {
    server: 'irc.freenode.net', 
    nick: username,
    firstchannel: '#ctf-portside'
  });

  // Array remove - By John Resig
  Array.prototype.remove = function (start, end) {
    var tail = this.slice((end || start) + 1 || this.length);
    this.length = start < 0 ? this.length + start : start;
    return this.push.apply(this, tail);
  };

  var addMessage = function (data) {
    var $msgDiv = $('div#panel_' + data.channel.replace('#', '-'));
    var $tab = $('a[href=#panel_' + data.channel.replace('#', '-') + ']');
    var highlight = '';
    if (data.from === 'you') {
      highlight = ' self'; // Space needed to separate class names
    } else if (data.message.indexOf(username) != -1) {
      highlight = ' mention';
    }

    var $newMsg = $(
      '<div class="message">' +
      '  <div class="left">' +
      '    <img src="' + data.pic + '" />' +
      '  </div>' +
      '  <div>' +
      '    <div class="titlebar' + highlight + '">' +
      '      <span>' + data.from + ' in ' + data.channel + '</span>' +
      '    </div>' +
      '    <div class="messageContent' + highlight + '">' +
      '      <span>' + data.message + '</span>' +
      '    </div>' +
      '  </div>' +
      '</div>'
    );
    $msgDiv.append($newMsg);
    $tab.children('span.notifyLow').text(notifications[data.channel].low);
    $tab.children('span.notifyHigh').text(notifications[data.channel].high);
    var scrollDist = $msgDiv[0].scrollHeight - $msgDiv[0].offsetHeight - $msgDiv[0].scrollTop;
    if (scrollDist >= 40) {
      $msgDiv.scrollTop($msgDiv[0].scrollHeight);
    }
  };

  var clearNotifications = function (evt) {
    var text = $(evt.currentTarget).text().trim();
    var channel = text.slice(text.lastIndexOf(' ') + 1);
    notifications[channel].low = 0;
    notifications[channel].high = 0;
    var $anchor = $(evt.currentTarget).children('a');
    $anchor.children('span.notifyLow').text('0');
    $anchor.children('span.notifyHigh').text('0');
  }

  // Add a new tab to the list of chat tabs and a content div to contain
  // the nick list and messages.
  var addChatSection = function (chanOrNick) {
    var $newTab = $(
      '<dd>' +
      '  <a href="#panel_' + chanOrNick.replace('#', '-') + '">' + 
      '    <span class="notifyLow">0</span>' +
      '    <span class="notifyHigh">0</span>' +
      '    ' + chanOrNick +
      '  </a>' +
      '</dd>'
    );
    $('dl#chatList').append($newTab);
    $newTab.click(clearNotifications);
    $('div#chatContent').append($(
      '<div class="content" id="panel_' + chanOrNick.replace('#', '-') + '">' +
      '</div>'
    ));
    // Set the height for this and any other chat content areas to fit nicely.
    $('div.content').height(($(window).height() - 130) + 'px');
  };

  var joinChat = function (channel) {
    chats.push(channel);
    nickLists.push(new Array());
    notifications[channel] = {low: 0, high: 0};
    addChatSection(channel);
  };

  var titleBlinker = function (origTitle, altTitle) {
    return (function () {
      document.title = altTitle;
      setTimeout(function () {
        document.title = origTitle;
      }, 500);
      });
  };

  var channelNotification = function (type, channel, nick) {
    console.log(nick + ' ' + type + ' ' + channel);
    var picture = (type === 'joined') ? '/images/userjoined.jpg' : '/images/userparted.jpg';
    addMessage({
      from: 'System',
      channel: channel,
      message: 'User ' + nick + ' has ' + type + ' this channel.',
      pic: picture
    });
  };

  socket.on('notifyLow', function (data) {
    var $activeDiv = $('div.active');
    if ($activeDiv.length > 0) {
      var activeChannel = $activeDiv.first().attr('id').replace('panel_', '').replace('-', '#'); 
      if (data.channel != activeChannel) { 
        if (data.message.indexOf(username) != -1) {
          notifications[data.channel].high++;
        } else {
          notifications[data.channel].low++; 
        }
      }
    }
    if (windowFocused === false && intervalID === undefined) {
      intervalID = setInterval(titleBlinker('aIRChat', '[!!] aIRChat [!!]'), 1000);
    }
    addMessage(data);
  });
  
  socket.on('notifyHigh', function (data) {
    var $activeDiv = $('div.active');
    if (notifications[data.from] === undefined) {
      joinChat(data.from); 
    }
    if ($activeDiv.length > 0) {
      var activeChannel = $activeDiv.first().attr('id').replace('panel_', '').replace('-', '#');
      if (data.from != activeChannel) { 
        notifications[data.from].high++; 
      }
    }
    addMessage({
      from: data.from,
      channel: data.from,
      message: data.message,
      pic: data.pic
    });
    if (windowFocused === false && intervalID === undefined) {
      intervalID = setInterval(titleBlinker('aIRChat', '[!!] aIRChat [!!]'), 1000);
    }
  });
  
  socket.on('connected', function (channel) {
    connected = true;
  });
  
  // Create a listing of nicks for the appropriate channel.
  // The list will not be rendered until the channel is the active one.
  socket.on('nickList', function (data) {
    var index = chats.indexOf(data.channel);
    nickLists[index] = Object.keys(data.nicks);
  });

  // Add a new nick to the list of nicks for the provided channel. 
  // Create a new chat tab if the aIRChat user is the one joining.
  socket.on('joined', function (data) {
    if (chats.indexOf(data.channel) === -1) {
      username = data.nick; 
    }
    if (data.nick === username) {
      console.log('Joined ' + data.channel);
      joinChat(data.channel);
    } else {
      var index = chats.indexOf(data.channel);
      nickLists[index].push(data.nick);
      channelNotification('joined', data.channel, data.nick);
    }
  });

  // Display a message telling the user they were kicked from the channel.
  // Also deactivate the send mechanism for this channel.
  socket.on('kicked', function (data) {
    addMessage({
      from: 'Kicked by ' + data.by,
      channel: data.channel,
      message: 'Reason provided: ' + data.reason,
      pic: '/images/defaultusericon.jpg'
    });
    // TODO
    // Block the user from trying to send messages to the channel
    // that they were kicked from.
  });

  // TODO
  // Make sure to only change the nick on the appropriate servers
  // Change the nick of a user in the nicklist
  socket.on('newNick', function (data) {
    for (var i = chats.length - 1; i >= 0; i--) {
      if (chats[i] === data.channel) {
        var index = nickLists[i].indexOf(data.old);
        nickLists[index] = data.new;
        return;
      }
    }
  });

  socket.on('invite', function (data) {
    // Ask the user if they want to join the channel they were invited to
    // data.to, data.by
    var msg = 'You have been invited to the channel ' + data.to + ' by ' + data.from + '\n';
    msg += 'Would you like to join this channel now?';
    if (confirm(msg)) {
      socket.emit('joinChannel', {channel: data.to});
    }
  });

  socket.on('userLeft', function (data) {
    var index = chats.indexOf(data.from);
    var nickIndex = nickLists[index].indexOf(data.nick);
    nickLists[index].remove(nickIndex);
    channelNotification('departed from', data.from, data.nick);
  });

  $('a#sendMessage').click(function (evt) {
    if ($('div.tabs-content').length === 0) {
      alert('You cannot send a message until you have joined a chat.');
      return;
    }
    var $ta = $('#messageInput');
    var dest = $('div.active').first().attr('id').replace('panel_', '').replace('-', '#');
    addMessage({channel: dest, from: 'you', message: $ta.val(), pic: '<%= profilepic %>'});
    socket.emit('writeChat', {destination: dest, message: $ta.val()});
    console.log('Sent "' + $ta.val() + '" to ' + dest);
    $ta.val('');
  });

  $('#messageInput').keypress(function (evt) {
    if (evt.which === 13) { // On [Enter]
      if ($('div.tabs-content').length === 0) {
        alert('You cannot send a message until you have joined a chat.');
        return;
      }
      var $ta = $('#messageInput');
      var dest = $('div.active').first().attr('id').replace('panel_', '').replace('-', '#');
      addMessage({channel: dest, from: 'you', message: $ta.val(), pic: '<%= profilepic %>'});
      socket.emit('writeChat', {destination: dest, message: $ta.val()});
      console.log('Sent "' + $ta.val() + '" to ' + dest);
      $ta.val('');
    }
  });

  // TODO
  // Make sure the channel name is valid
  $('a#joinNewChannel').click(function (evt) {
    var chanName = $('#newChannelName').val();
    socket.emit('joinChannel', {channel: chanName});
  });

  $('a[data-reveal-id=getNickList]').click(function (evt) {
    var channel = $($('div.active')[0]).attr('id').replace('panel_', '').replace('-', '#');
    var index = chats.indexOf(channel); 
    console.log('Building nicklist\n' + nickLists[index].toString());
    $('div#getNickList > h1').text('Users in ' + channel);
    $('ul#listOfNicks').html(''); // Empty out the list in case is it populated already.
    for (var i = nickLists[index].length - 1; i >= 0; i--) {
      $('ul#listOfNicks').prepend($('<li>' + nickLists[index][i] + '</li>'));
    }
  });

  $('a#logout').click(function (evt) {
    socket.emit('disconnect'); 
  });

  $('a#sendPrivMsg').click(function (evt) {
    var msg = $('#privMsgContents').val();
    var nick = $('#privMsgNick').val();
    joinChat(nick);
    addMessage({channel: nick, from: 'you', message: msg, pic: '<%= profilepic %>'});
    socket.emit('writeChat', {destination: nick, message: msg});
  });

  $('a[data-reveal-id=partChannel]').click(function (evt) {
    var chanName = $('div.active').first().attr('id').replace('panel_', '').replace('-', '#');
    $('div#partChannel div.row div.columns p').text(
      'Are you sure you want to leave ' + chanName + '?'
    );
  });

  $('a#confirmPartChannel').click(function (evt) {
    var chanName = $('div.active').first().attr('id').replace('panel_', '').replace('-', '#');  
    var index = chats.indexOf(chanName);
    chats.remove(index);
    nickLists.remove(index);
    delete notifications[chanName];
    $('dd.active').remove();
    $('div.active').remove();
    if (chanName[0] === '#') { // Channel, not a private chat
      socket.emit('part', {channel: chanName, message: 'aIRChat client parted.'});
    }
  });

  $(window).on('resize', function (evt) {
    $('div.content').height(($(window).height() - 130) + 'px');
    $('div#nickListPane').height(($(window).height() - 250) + 'px');
  });

  $(document).ready(function () {
    // It doesn't make sense to set any chat content areas' height here
    // because none exist yet!
    $('div#nickListPane').height(($(window).height() - 250) + 'px');
  });

  $(window).focus(function (evt) {
    windowFocused = true;
    if (intervalID != undefined) {
      clearInterval(intervalID);
      intervalID = undefined;
    }
  });

  $(window).blur(function (evt) {
    windowFocused = false;
  });
</script>
<% include foot %>

<% include head %>
<!-- Dialog for connecting to a new server -->
<div class="reveal-modal" id="newServer" data-reveal>
  <h1>Connect to a server</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="server address" id="newServerAddr" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newServerChannel" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="connectToNewServer">Connect</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for joining a new channel -->
<div class="reveal-modal" id="newChannel" data-reveal>
  <h1>Join a channel</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="channel name" id="newChannelName" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="joinNewChannel">Join</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog asking for confirmation to part from channel -->
<div class="reveal-modal" id="partChannel" data-reveal>
  <h1>Leave channel</h1>
  <div class="row">
    <div class="small-8 columns">
      <p><!-- Filled by JS --></p>
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <ul class="button-group">
        <li><a href="#" class="success button close-reveal-modal" id="confirmPartChannel">Confirm</a></li>
        <li><a href="#" class="button close-reveal-modal">Cancel</a></li>
      </ul>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for changing the user's nick -->
<div class="reveal-modal" id="changeNickModal" data-reveal>
  <h1>Change your nick</h1>
  <div class="row">
    <div class="small-8 columns">
      <p>
        Change the name that people will see alongside all of the messages you send
        to channels or users on the currently selected server.
      </p>
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" id="newNickInput" placeholder="New nick" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <a href="#" class="success button close-reveal-modal" id="changeNickConfirm">Comfirm</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for seeing a list of nicks of users in the active channel. -->
<div class="reveal-modal" id="getNickList" data-reveal>
  <h1><!-- Filled by JS --></h1>
  <div id="nickListPane">
    <ul id="listOfNicks">
      <!-- Filled by JS -->
    </ul>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for sending a new private message -->
<div class="reveal-modal" id="privMsg" data-reveal>
  <h1>Send a private message</h1>
  <div class="row">
    <div class="small-8 columns">
      <input type="text" placeholder="nickname" id="privMsgNick" />
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <textarea id="privMsgContents" placeholder="message to user"></textarea>
    </div>
  </div>
  <div class="row">
    <div class="small-8 columns">
      <a href="#" class="success button close-reveal-modal" id="sendPrivMsg">Send</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
<!-- Dialog for setting profile information -->
<div class="reveal-modal" id="profileSettings" data-reveal>
  <h1>Profile settings</h1>
  <div class="row">
    <div class="small-12 small-centered columns">
      <h2><%= username %></h2>
    </div>
  </div>
  <div class="row">
    <div class="small-12 small-centered columns">
      <img class="thumbnail" id="ownProfilePic" src="<%= profilepic %>" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <input type="text" id="profilePicLocation" placeholder="Image URL" />
     </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <h3>Bio</h3>
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <textarea id="bio"><%= userbio %></textarea>
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <h3>Contact</h3>
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <input type="text" placeholder="contact information" id="contact" value="<%= contact %>" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 medium-8 columns">
      <p>
        Enter your password to authorize this change to your profile.
      </p>
      <input type="password" id="passwordConfirm" />
    </div>
  </div>
  <div class="row">
    <div class="small-12 columns">
      <a href="#" id="submitProfile" class="success button">Submit changes</a>
    </div>
  </div>
  <a class="close-reveal-modal">&#215;</a>
</div>
  
</div>
<!-- Nav bar for chat management -->
<nav class="top-bar" data-topbar>
  <ul class="title-area">
    <li class="name">
      <h1><a href="#">aIRChat</a></h1>
    </li>
  </ul>
  <section class="top-bar-section">
    <ul class="right">
      <li class="divider"></li>
      <li class="has-dropdown">
        <a href="#">Chat</a>
        <ul class="dropdown">
          <li><a href="#" data-reveal-id="newServer">Connect to server</a></li>
          <li><a href="#" data-reveal-id="newChannel">Join a channel</a></li>
          <li><a href="#" data-reveal-id="partChannel">Leave active channel</a></li>
          <li><a href="#" data-reveal-id="changeNickModal">Change your nickname</a></li>
          <li><a href="#" data-reveal-id="getNickList">List of users</a></li>
          <li><a href="#" data-reveal-id="privMsg">Send a private message</a></li>
        </ul>
      </li>
      <li class="divider"></li>
      <li><a href="#" data-reveal-id="profileSettings">Profile</a></li>
      <li class="divider"></li>
      <li><a href="/logout" id="logout">Log out</a></li>
    </ul>
  </section>
</nav>
<!-- Chat content -->
<!-- Channel and private message chat listing -->
<dl class="tabs vertical" id="chatList" data-tab>
</dl>
<!-- Content of chat -->
<div class="tabs-content vertical" id="chatContent">
</div>
<input type="text" type="text" id="messageInput" placeholder="Message" />
<script src="/javascripts/users.js"></script>
<script src="/javascripts/chats.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script type="text/javascript">
  var hostname = '<%= host %>';
  var username = '<%= username %>';
  var socket = io.connect(hostname);
  var sid = '<%= sessionID %>';
  var profilepic = '<%= profilepic %>';
  var userbio = '<%= userbio %>';
  var contact = '<%= contact %>';

  // Storage for the ID of the interval used to blink the title
  // when there is a message waiting for the user.
  var intervalID = undefined;
  var windowFocused = true;
 
  // Array of chat objects
  var chats = new Array();
 
  // Maps the name of a given server to the user's nick on that server.
  var usernicks = {};

  socket.emit('serverJoin', {
    server: 'irc.freenode.net', 
    nick: username,
    firstchannel: '#ctf-portside',
    sid: sid
  });

  var chatTab = function (server, channel, active) {
    if (active === undefined || active === false) {
      var mod = '';
    } else {
      var mod = '.active';
    }
    return $('dd' + mod).filter(function () {
      return $(this).data('server') === server && $(this).data('channel') === channel;
    }).first();
  };

  var messageBox = function (server, channel, active) {
    if (active === undefined || active === false) {
      var mod = '';
    } else {
      var mod = '.active';
    }
    return $('div' + mod).filter(function () {
      return $(this).data('server') === server && $(this).data('channel') === channel;
    }).first();
  };

  // Array remove - By John Resig
  Array.prototype.remove = function (start, end) {
    var tail = this.slice((end || start) + 1 || this.length);
    this.length = start < 0 ? this.length + start : start;
    return this.push.apply(this, tail);
  };

  var addMessage = function (data) {
    var $msgDiv = messageBox(data.server, data.channel);
    var $tab = chatTab(data.server, data.channel).children('a').first();
    var chat = chats[chatIndex(chats, data.server, data.channel)];
    var user = chat.users[userIndex(chat.users, data.from)];
    console.log('Got user');
    console.log(user);
    if (user === undefined) {
      var picture = '/images/defaultusericon.jpg';
    } else {
      var picture = user.picture;
    }
    var highlight = '';

    if (data.from === username) {
      highlight = ' self'; // Space needed to separate class names
    } else if (data.message.indexOf(username) != -1) {
      highlight = ' mention';
    }

    var $newMsg = $(
      '<div class="message">' +
      '  <div class="left">' +
      '    <img src="' + picture + '" />' +
      '  </div>' +
      '  <div>' +
      '    <div class="titlebar' + highlight + '">' +
      '      <span>' + data.from + ' in ' + data.channel + '</span>' +
      '    </div>' +
      '    <div class="messageContent' + highlight + '">' +
      '      <span>' + data.message + '</span>' +
      '    </div>' +
      '  </div>' +
      '</div>'
    );
    $msgDiv.append($newMsg);
    $tab.children('span.notifyLow').text(chat.lowPriorityNotifications());
    $tab.children('span.notifyHigh').text(chat.highPriorityNotifications());
    var scrollDist = $msgDiv[0].scrollHeight - $msgDiv[0].offsetHeight - $msgDiv[0].scrollTop;
    if (scrollDist >= 40) {
      $msgDiv.scrollTop($msgDiv[0].scrollHeight);
    }
  };

  var clearNotifications = function (evt) {
    var server = $(evt.currentTarget).data('server');
    var channel = $(evt.currentTarget).data('channel');
    var $anchor = $(evt.currentTarget).children('a');
    chats[chatIndex(chats, server, channel)].clearNotifications();
    $anchor.children('span.notifyLow').text('0');
    $anchor.children('span.notifyHigh').text('0');
  };

  // Add a new tab to the list of chat tabs and a content div to contain
  // the nick list and messages.
  var addChatSection = function (server, chanOrNick) {
    var $newTab = $(
      '<dd data-server="' + server + '" data-channel="' + chanOrNick + '">' +
      '  <a href="#panel_' + label(server, chanOrNick) + '">' +
      '    <span class="notifyLow">0</span>' +
      '    <span class="notifyHigh">0</span>' +
      '    ' + chanOrNick +
      '  </a>' +
      '</dd>'
    );
    $('dl#chatList').append($newTab);
    $newTab.click(clearNotifications);
    $('div#chatContent').append($(
      '<div class="content" id="panel_' + label(server, chanOrNick) + '" ' +
           'data-server="' + server + '" data-channel="' + chanOrNick + '">' +
      '</div>'
    ));
    // Set the height for this and any other chat content areas to fit nicely.
    $('div.content').height(($(window).height() - 130) + 'px');
  };

  var joinChat = function (server, channel) {
    chats.push(new Chat(server, channel));
    addChatSection(server, channel);
  };

  var titleBlinker = function (origTitle, altTitle) {
    return (function () {
      document.title = altTitle;
      setTimeout(function () {
        document.title = origTitle;
      }, 500);
      });
  };

  var channelNotification = function (type, server, channel, nick) {
    addMessage({
      from: 'System',
      server: server,
      channel: channel,
      message: 'User ' + nick + ' has ' + type + ' this channel.'
    });
  };

  socket.on('notifyLow', function (data) {
    var $ad = $('div.active');
    if ($ad.data('server') != data.server || $ad.data('channel') != data.channel) {
      if (data.message.indexOf(usernicks[data.server]) != -1) {
        chats[chatIndex(chats, data.server, data.channel)].gotHighPriorityMessage();
      } else {
        chats[chatIndex(chats, data.server, data.channel)].gotLowPriorityMessage(); 
      }
    }
    if (windowFocused === false && intervalID === undefined) {
      intervalID = setInterval(titleBlinker('aIRChat', '[!!] aIRChat [!!]'), 1000);
    }
    addMessage(data);
  });
  
  socket.on('notifyHigh', function (data) {
    var $activeDiv = $('div.active');
    if (chats[chatIndex(chats, data.server, data.channel)] === undefined) {
      joinChat(data.server, data.from);
    }
    if ($activeDiv.data('server') != data.server || $activeDiv.data('channel') != data.channel) {
      chats[chatIndex(chats, data.server, data.channel)].gotHighPriorityNotification();
    }
    addMessage({
      from: data.from,
      server: data.server,
      channel: data.from,
      message: data.message
    });
    if (windowFocused === false && intervalID === undefined) {
      intervalID = setInterval(titleBlinker('aIRChat', '[!!] aIRChat [!!]'), 1000);
    }
  });
  
  socket.on('connected', function (server, channel) {
    usernicks[server] = username;
  });
  
  // Create a listing of nicks for the appropriate channel.
  // The list will not be rendered until the channel is the active one.
  socket.on('nickList', function (data) {
    var chat = chats[chatIndex(chats, data.server, data.channel)];
    console.log('Got nicklist for ' + data.channel);
    for (var i = data.users.length - 1; i >= 0; i--) {
      chat.users.push(new User(
        data.users[i].nick, 
        data.users[i].bio, 
        data.users[i].contact, 
        data.users[i].picture, 
        data.users[i].server
      ));
    }
    chat.users.push(new User(
      'System', '', '', '/images/defaultusericon.jpg', data.server
    ));
  });

  // Add a new nick to the list of nicks for the provided channel. 
  // Create a new chat tab if the aIRChat user is the one joining.
  socket.on('joined', function (data) {
    if (chatIndex(chats, data.server, data.channel) === -1) { 
      usernicks[data.server] = data.nick;
    }
    if (data.nick === usernicks[data.server] ) {
      joinChat(data.server, data.channel);
    } else {
      var index = chatIndex(chats, data.server, data.channel);
      chats[index].users.push(new User(
        data.nick, data.bio, data.contact, data.picture, data.server
      ));
      channelNotification('joined', data.server, data.channel, data.nick);
    }
  });

  // Display a message telling the user they were kicked from the channel.
  // Also deactivate the send mechanism for this channel.
  socket.on('kicked', function (data) {
    addMessage({
      from: 'System',
      server: data.server,
      channel: data.channel,
      message: 'You were kicked by ' + data.by + '. Reason provided: ' + data.reason
    });
    // TODO
    // Block the user from trying to send messages to the channel
    // that they were kicked from.
    // Might want to use an alert or something and close the tab automatically.
  });

  socket.on('newNick', function (data) {
    var chat = chats[chatIndex(chats, data.server, data.channel)];
    chat.getUser(data.old).changeNick(data.new);
  });

  socket.on('invited', function (data) {
    var msg = 'You have been invited to the channel ' + data.to;
    msg += ' on ' + data.server + ' by ' + data.by + '\n';
    msg += 'Would you like to join this channel now?';
    if (confirm(msg)) {
      socket.emit('joinChannel', {server: data.server, channel: data.to, sid: sid});
    }
  });

  socket.on('userLeft', function (data) {
    var userList = chats[chatIndex(chats, data.server, data.from)].users;
    var index = userList.findIndex(function (elem, index, arr) {
      return elem.sameUserAs(data.nick);
    });
    // TODO
    // Test to make sure this is definitely removing the user from the list
    userList.remove(index);
    channelNotification('departed from', data.from, data.nick);
  });

  $('#messageInput').keypress(function (evt) {
    var server = $('div.active').first().data('server');
    var dest = $('div.active').first().data('channel');
    if (evt.which === 13) { // On [Enter]
      if ($('div.tabs-content').length === 0 || !server) {
        alert('You cannot send a message until you have joined and selected chat.');
        return;
      }
      var $ta = $('#messageInput');
      addMessage({
        server: server,
        channel: dest, 
        from: usernicks[server], 
        message: $ta.val()
      });
      socket.emit('writeChat', {
        server: server, 
        destination: dest, 
        message: $ta.val(),
        sid: sid
      });
      $ta.val('');
    }
  });

  // TODO
  // Make sure the channel name is valid
  $('a#joinNewChannel').click(function (evt) {
    var server = $('div.active').data('server');
    var chanName = $('#newChannelName').val();
    if (server === undefined) {
      alert('You must select a chat tab for a channel belonging to the ' +
            'same server the channel you wish to join is in.'
      );
    }
    socket.emit('joinChannel', {server: server, channel: chanName, sid: sid});
  });

  $('a#connectToNewServer').click(function (evt) {
    var serverName = $('#newServerAddr').val();
    var firstChannel = $('#newServerChannel').val();
    socket.emit('serverJoin', {
      server: serverName,
      nick: username,
      firstchannel: firstChannel,
      sid: sid
    });
  });

  $('a[data-reveal-id=getNickList]').click(function (evt) {
    var channel = $('div.active').first().data('channel');
    var server = $('div.active').first().data('server');
    if (channel === undefined || server === undefined) {
      $('div#getNickList > h1').text(
        'You must select a channel to retrieve a list of users from.'
      );
      return;
    }
    var users = chats[chatIndex(chats, server, channel)].users;
    $('div#getNickList > h1').text('Users in ' + channel);
    $('ul#listOfNicks').html(''); // Empty out the list in case is it populated already.
    for (var i = users.length - 1; i >= 0; i--) {
      $('ul#listOfNicks').prepend($('<li>' + users[i].nick + '</li>'));
    }
  });

  $('a#logout').click(function (evt) {
    socket.emit('disconnect', {sid: sid}); 
  });

  $('a#sendPrivMsg').click(function (evt) {
    var msg = $('#privMsgContents').val();
    var nick = $('#privMsgNick').val();
    var server = $('div.active').first().data('server');
    joinChat(server, nick);
    addMessage({server: server, channel: nick, from: usernicks[server], message: msg});
    socket.emit('writeChat', {server: server, destination: nick, message: msg, sid: sid});
  });

  $('a[data-reveal-id=partChannel]').click(function (evt) {
    var channel = $('div.active').first().data('channel');
    $('div#partChannel div.row div.columns p').text(
      'Are you sure you want to leave ' + channel + '?'
    );
  });

  $('a#confirmPartChannel').click(function (evt) {
    var channel = $('div.active').first().data('channel');
    var server = $('div.active').first().data('server');
    var index = chats[chatIndex(chats, server, channel)];
    chats.remove(index);
    $('dd.active').first().remove();
    $('div.active').first().remove();
    if (channel[0] === '#') { // Channel, not a private chat
      socket.emit('part', {
        server: server, 
        channel: chanName, 
        message: 'aIRChat client parted.',
        sid: sid
      });
    }
  });

  $('a#changeNickConfirm').click(function (evt) {
    var newNick = $('input#newNickInput').val();
    if (newNick.length === 0) {
      alert('You need to provide a new nickname to switch to!');
      return;
    }
    var server = $('dd.active').first().data('server');
    if (!server) {
      alert('You have not yet selected a chat tab to base changes on!');
      return;
    }
    socket.emit('changeNick', {server: server, sid: sid, nick: newNick});
    usernicks[server] = newNick;
  });

  $('#submitProfile').click(function (evt) {
    var ci = $('#contact').val();
    var bi = $('#bio').val();
    var pp = $('#profilePicLocation').val();
    $.ajax('/profileupdate', {
      type    : 'POST',
      data    : {
        username : username,
        password : $('#passwordConfirm').val(),
        contact  : ci,
        bio      : bi,
        picture  : pp
      },
      error   : function (obj, status, errorThrown) {
        alert('Your profile information could not be updated. Reason: ' + status);
      },
      success : function (data, status, obj) {
        if (data.success) {
          alert('Your profile information was updated successfully.');
          $('#ownProfilePic').attr('src', pp);
          profilepic = pp;
          contact = ci;
          userbio = bi;
        } else {
          alert('Your profile information could not be updated.\n' +
                'Please ensure that you have entered the correct password and try again.');
        }
      }
    });
  });

  $(window).on('resize', function (evt) {
    $('div.content').height(($(window).height() - 130) + 'px');
    $('div#nickListPane').height(($(window).height() - 250) + 'px');
  });

  $(document).ready(function () {
    // It doesn't make sense to set any chat content areas' height here
    // because none exist yet!
    $('div#nickListPane').height(($(window).height() - 250) + 'px');
  });

  $(window).focus(function (evt) {
    windowFocused = true;
    if (intervalID != undefined) {
      clearInterval(intervalID);
      intervalID = undefined;
    }
  });

  $(window).blur(function (evt) {
    windowFocused = false;
  });
</script>
<% include foot %>
